@page "/todo"
@using System
@using TodoList.Models
@using TodoList.Data
@inject ITodoRepository _todoRepository;

<PageTitle>Todo</PageTitle>

@if (error)
{
	<h2>Invalid</h2>
}
<div class="form-group">
	<div class="mb-3">
		<label for="TodoTitle" class="form-label">Title</label>
		<input type="text" class="form-control" id="TodoTitle" aria-describedby="TodoTitle" @bind="todo.Title">
		<div id="todoTitleHelp" class="form-text">Title</div>
	</div>

	<div class="mb-3">
		<label for="TodoTitle" class="form-label">Description</label>
		<textarea class="form-control" id="TodoDescription" aria-describedby="TodoDescription"
			@bind="todo.Description" />
		<div id="todoDescriptionHelp" class="form-text">Description</div>
	</div>

	<button class="btn btn-primary" @onclick="onAddButtonClick">Add todo</button>
</div>

<h3>Todos remaining: @todos.Count(todo => !todo.IsDone)</h3>

<ul>
	@foreach (var StoredTodo in todos)
	{
		<li>
			<input ref="todoCheckbox" type="checkbox" bind="@StoredTodo.IsDone"
				@onchange="(e) => OnTodoCheckboxChanged(e, StoredTodo)" />
			<button class="btn btn-secondary" @onclick="(e) => onEditButtonClick(e, StoredTodo)">Edit</button>
			<input @bind="StoredTodo.Title" />
			<span>@StoredTodo.Status</span>
			<span>@StoredTodo.Description</span>
		</li>
	}
</ul>


@code {
	private List<TodoItem> todos = new();
	private TodoItem todo = new() { Id = Guid.NewGuid() };
	private bool error = false;
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await _todoRepository.InitializeAsync();
			await RefreshTodos();
		}
	}

	private async Task onAddButtonClick(MouseEventArgs e)
	{
		error = !await _todoRepository.AddOrUpdate(todo);

		todo = new() { Id = Guid.NewGuid() };
		await RefreshTodos();
	}

	private void onEditButtonClick(MouseEventArgs e, TodoItem selectedTodo)
	{
		todo = selectedTodo;
	}

	private async Task OnTodoCheckboxChanged(ChangeEventArgs e, TodoItem todo)
	{
		todo.Status = (e.Value is bool value && value) ? TodoItemStatus.Done : TodoItemStatus.InProgress;
		await _todoRepository.AddOrUpdate(todo);
		await RefreshTodos();
	}

	private async Task RefreshTodos()
	{
		todos = await _todoRepository.GetTodos();
		StateHasChanged();
	}
}
